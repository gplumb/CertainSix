/*
 * Shipping Container Spoilage
 *
 * An API that tracks spoilage in shipping containers due to over heating for periods of time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ShippingContainer.ViewModels
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Trip : IEquatable<Trip>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The total number of containers in the trip.
        /// </summary>
        /// <value>The total number of containers in the trip.</value>
        [Required]
        [DataMember(Name="containerCount")]
        public double? ContainerCount { get; set; }

        /// <summary>
        /// The maximum temperature for all containers in the trip in degrees celsius.
        /// </summary>
        /// <value>The maximum temperature for all containers in the trip in degrees celsius.</value>
        [Required]
        [DataMember(Name="maxTemperature")]
        public float? MaxTemperature { get; set; }

        /// <summary>
        /// The mean temperature for all containers in the trip in degrees celsius.
        /// </summary>
        /// <value>The mean temperature for all containers in the trip in degrees celsius.</value>
        [Required]
        [DataMember(Name="meanTemperature")]
        public float? MeanTemperature { get; set; }

        /// <summary>
        /// The overall number of spoiled containers.
        /// </summary>
        /// <value>The overall number of spoiled containers.</value>
        [Required]
        [DataMember(Name="spoiledContainerCount")]
        public double? SpoiledContainerCount { get; set; }

        /// <summary>
        /// The overall number of spoiled products.
        /// </summary>
        /// <value>The overall number of spoiled products.</value>
        [Required]
        [DataMember(Name="spoiledProductCount")]
        public double? SpoiledProductCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trip {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContainerCount: ").Append(ContainerCount).Append("\n");
            sb.Append("  MaxTemperature: ").Append(MaxTemperature).Append("\n");
            sb.Append("  MeanTemperature: ").Append(MeanTemperature).Append("\n");
            sb.Append("  SpoiledContainerCount: ").Append(SpoiledContainerCount).Append("\n");
            sb.Append("  SpoiledProductCount: ").Append(SpoiledProductCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Trip)obj);
        }

        /// <summary>
        /// Returns true if Trip instances are equal
        /// </summary>
        /// <param name="other">Instance of Trip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trip other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ContainerCount == other.ContainerCount ||
                    ContainerCount != null &&
                    ContainerCount.Equals(other.ContainerCount)
                ) && 
                (
                    MaxTemperature == other.MaxTemperature ||
                    MaxTemperature != null &&
                    MaxTemperature.Equals(other.MaxTemperature)
                ) && 
                (
                    MeanTemperature == other.MeanTemperature ||
                    MeanTemperature != null &&
                    MeanTemperature.Equals(other.MeanTemperature)
                ) && 
                (
                    SpoiledContainerCount == other.SpoiledContainerCount ||
                    SpoiledContainerCount != null &&
                    SpoiledContainerCount.Equals(other.SpoiledContainerCount)
                ) && 
                (
                    SpoiledProductCount == other.SpoiledProductCount ||
                    SpoiledProductCount != null &&
                    SpoiledProductCount.Equals(other.SpoiledProductCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ContainerCount != null)
                    hashCode = hashCode * 59 + ContainerCount.GetHashCode();
                    if (MaxTemperature != null)
                    hashCode = hashCode * 59 + MaxTemperature.GetHashCode();
                    if (MeanTemperature != null)
                    hashCode = hashCode * 59 + MeanTemperature.GetHashCode();
                    if (SpoiledContainerCount != null)
                    hashCode = hashCode * 59 + SpoiledContainerCount.GetHashCode();
                    if (SpoiledProductCount != null)
                    hashCode = hashCode * 59 + SpoiledProductCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Trip left, Trip right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Trip left, Trip right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
