/*
 * Shipping Container Spoilage
 *
 * An API that tracks spoilage in shipping containers due to over heating for periods of time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ShippingContainer.ViewModels
{
    /// <summary>
    /// ContainerCreationDetails
    /// </summary>
    [DataContract]
    public partial class ContainerCreationDetails : IEquatable<ContainerCreationDetails>
    { 
        /// <summary>
        /// The container id.
        /// </summary>
        /// <value>The container id.</value>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }


        /// <summary>
        /// The number of products in the container.
        /// </summary>
        /// <value>The number of products in the container.</value>
        [Required]
        [DataMember(Name="productCount")]
        [Range(0, double.MaxValue)]
        public double ProductCount { get; set; }


        /// <summary>
        /// The container measurements.
        /// </summary>
        /// <value>The container measurements.</value>
        [Required]
        [DataMember(Name="measurements")]
        public List<TemperatureRecord> Measurements { get; set; }


        #region System.Object

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerCreationDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductCount: ").Append(ProductCount).Append("\n");
            sb.Append("  Measurements: ").Append(Measurements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }


        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }


        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerCreationDetails)obj);
        }


        /// <summary>
        /// Returns true if ContainerCreationDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerCreationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerCreationDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProductCount == other.ProductCount ||
                    ProductCount.Equals(other.ProductCount)
                ) && 
                (
                    Measurements == other.Measurements ||
                    Measurements != null &&
                    Measurements.SequenceEqual(other.Measurements)
                );
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    hashCode = hashCode * 59 + ProductCount.GetHashCode();
                    if (Measurements != null)
                    hashCode = hashCode * 59 + Measurements.GetHashCode();
                return hashCode;
            }
        }

        #endregion

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ContainerCreationDetails left, ContainerCreationDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerCreationDetails left, ContainerCreationDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
