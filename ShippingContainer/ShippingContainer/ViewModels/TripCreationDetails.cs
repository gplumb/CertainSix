/*
 * Shipping Container Spoilage
 *
 * An API that tracks spoilage in shipping containers due to over heating for periods of time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ShippingContainer.ViewModels
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TripCreationDetails : IEquatable<TripCreationDetails>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The temperature at which products start to spoil in degrees celsius.
        /// </summary>
        /// <value>The temperature at which products start to spoil in degrees celsius.</value>
        [Required]
        [DataMember(Name="spoilTemperature")]
        public float? SpoilTemperature { get; set; }

        /// <summary>
        /// The number of seconds required at the spoil temperature to cause product spolage.
        /// </summary>
        /// <value>The number of seconds required at the spoil temperature to cause product spolage.</value>
        [Required]
        [DataMember(Name="spoilDuration")]
        public double? SpoilDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TripCreationDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SpoilTemperature: ").Append(SpoilTemperature).Append("\n");
            sb.Append("  SpoilDuration: ").Append(SpoilDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TripCreationDetails)obj);
        }

        /// <summary>
        /// Returns true if TripCreationDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of TripCreationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TripCreationDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SpoilTemperature == other.SpoilTemperature ||
                    SpoilTemperature != null &&
                    SpoilTemperature.Equals(other.SpoilTemperature)
                ) && 
                (
                    SpoilDuration == other.SpoilDuration ||
                    SpoilDuration != null &&
                    SpoilDuration.Equals(other.SpoilDuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SpoilTemperature != null)
                    hashCode = hashCode * 59 + SpoilTemperature.GetHashCode();
                    if (SpoilDuration != null)
                    hashCode = hashCode * 59 + SpoilDuration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TripCreationDetails left, TripCreationDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TripCreationDetails left, TripCreationDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
