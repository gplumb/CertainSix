/*
 * Shipping Container Spoilage
 *
 * An API that tracks spoilage in shipping containers due to over heating for periods of time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ShippingContainer.ViewModels
{
    /// <summary>
    /// TemperatureRecord
    /// </summary>
    [DataContract]
    public partial class TemperatureRecord : IEquatable<TemperatureRecord>
    { 
        /// <summary>
        /// The time of the recording as an ISO 8601 standard string.
        /// </summary>
        /// <value>The time of the recording as an ISO 8601 standard string.</value>
        [Required]
        [DataMember(Name="time")]
        public DateTime Time { get; set; }


        /// <summary>
        /// The recording value in degrees celsius.
        /// </summary>
        /// <value>The recording value in degrees celsius.</value>
        [Required]
        [DataMember(Name="value")]
        public float Value { get; set; }


        #region System.Object

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemperatureRecord {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }


        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }


        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TemperatureRecord)obj);
        }


        /// <summary>
        /// Returns true if TemperatureRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TemperatureRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureRecord other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Time.GetHashCode();
                hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #endregion

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TemperatureRecord left, TemperatureRecord right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TemperatureRecord left, TemperatureRecord right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
